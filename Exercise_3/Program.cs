using System;

/* Элемент матрицы называется локальным минимумом, если он строго меньше всех имеющихся у него соседей. 
 * Подсчитать количество локальных минимумов заданной матрицы размером n на n. 
 * Найти сумму модулей элементов, расположенных выше главной диагонали */

namespace Exercise_3
{
    class Program
    {
        static void Main(string[] args)
        {
            var x = new Random();
            int n = x.Next(3, 10); //размер матрицы
            int min = 0; //количество локальных минимумов заданной матрицы
            int sum = 0; //сумма модулей элементов, расположенных выше главной диагонали
            int i, j; //счетчики циклов
            var rand = new Random();

            //Генерация матрицы размером n х n и её вывод (от 3 до 10)
            int[,] array = new int[n, n];
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < n; j++)
                {
                    Console.Write("{0,3}", array[i, j] = rand.Next(0, 100));
                }
                Console.WriteLine();
            }

            for (i = 1; i < n - 1; i++) //Подсчет количества локальных минимумов заданной матрицы
            {
                for (j = 1; j < n - 1; j++)
                {
                    if ((array[i, j] < array[i, j - 1]) && (array[i, j] < array[i - 1, j]) && (array[i, j] < array[i, j + 1]) && (array[i, j] < array[i + 1, j]))
                    {
                        min++;
                    }
                }
            }
            Console.WriteLine("\nКоличество локальных минимумов: " + min);

            for (i = 0; i < n - 1; ++i) //Поиск суммы модулей элементов, расположенных выше главной диагонали
            {
                for (j = i + 1; j < n; ++j)
                {
                    sum += array[i, j];
                }
            }
            Console.WriteLine("\nСумма модулей элементов, расположенных выше главной диагонали: " + sum);
            Console.ReadKey();
        }
    }
}
